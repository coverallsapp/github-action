# action.yml
name: 'Coveralls GitHub Action'
description: 'Send test coverage data to Coveralls.io for analysis, change tracking, and notifications.'
author: Coveralls.io
inputs:
  github-token:
    description: 'Put secrets.GITHUB_TOKEN here'
    required: false
    default: ${{ github.token }}
  path-to-lcov:
    description: 'Path to lcov file [DEPRECATED]'
    required: false
  file:
    description: 'Coverage file'
    required: false
  files:
    description: 'Space-separated list of coverage files'
    required: false
  format:
    description: 'Force coverage format, supported formats: lcov, simplecov, cobertura, jacoco, gcov, golang, python'
    required: false
  flag-name:
    description: 'Job flag name, e.g. "Unit", "Functional", or "Integration". Will be shown in the Coveralls UI.'
    required: false
  build-number:
    description: 'Override the build number autodetected from CI. This is useful if your CI tool assigns a different build number per each parallel build.'
    required: false
  parallel:
    description: 'Set to true if you are running parallel jobs, then use "parallel-finished: true" for the last action.'
    required: false
  parallel-finished:
    description: 'Set to true for the last action when using "parallel: true".'
    required: false
  carryforward:
    description: 'Comma separated flags used to carryforward results from previous builds if some of the parallel jobs are missing.'
    required: false
  coveralls-endpoint:
    description: 'Coveralls Enterprise server (more info: https://enterprise.coveralls.io)'
    required: false
    default: 'https://coveralls.io'
  allow-empty:
    description: "Don't fail when coverage report file is empty or contains no data"
    required: false
    default: 'false'
  base-path:
    description: 'The root folder of the project that originally ran the tests'
    required: false
  git-branch:
    description: 'Override the branch name'
    required: false
  git-commit:
    description: 'Override the commit sha'
    required: false
  compare-ref:
    description: 'Branch name to use as the base for coverage results'
    required: false
  compare-sha:
    description: 'Commit SHA to use as the base for coverage results'
    required: false
  debug:
    description: 'Enable debug output'
    required: false
    default: 'false'
  measure:
    description: 'Show execution time of parsing and reporting'
    required: false
    default: 'false'
  fail-on-error:
    description: 'Whether to fail (exit code 1) on any issues while uploading the coverage'
    required: false
    default: 'true'
  coverage-reporter-version:
    description: "Version of coverage-reporter to use. Make sure to prefix the version number with 'v'. For example: v0.6.9"
    required: false
    default: 'latest'
branding:
  color: 'green'
  icon: 'percent'
runs:
  using: 'composite'
  steps:
    - name: Install coveralls reporter (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Enable debugging if 'debug' is true
        [ "${{ inputs.debug }}" == "true" ] && set -x
        
        # Try to install coverage-reporter via Homebrew
        brew tap coverallsapp/coveralls --quiet
        brew install coveralls --quiet

        # Check if the binary exists in the possible locations
        if [ -f /usr/local/bin/coveralls ]; then
          echo "/usr/local/bin" >> $GITHUB_PATH
        elif [ -f /opt/homebrew/bin/coveralls ]; then
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
        else
          echo "Coveralls binary not found after installation (MacOS)."
          exit 1
        fi

    - name: Report coverage-reporter-version exception for macOS
      if: ${{ runner.os == 'macOS' && inputs.coverage-reporter-version != 'latest' }}
      shell: bash
      run: |
        echo "The coverage-reporter-version parameter is not available on macOS." >&2
        exit 1

    - name: Install coveralls reporter (Linux)
      if: runner.os == 'Linux'
      env:
        COVERAGE_REPORTER_VERSION: ${{ inputs.coverage-reporter-version }}
      shell: bash
      run: |
        # Enable debugging if 'debug' is true
        [ "${{ inputs.debug }}" == "true" ] && set -x

        mkdir -p ~/bin/
        cd ~/bin/

        # Determine which version of coverage-reporter to download
        if [ "$COVERAGE_REPORTER_VERSION" == "latest" ]; then
          asset_path="latest/download"
        else
          asset_path="download/${COVERAGE_REPORTER_VERSION}"
        fi

        # Try to download the binary and checksum file
        if ! curl -sLO "https://github.com/coverallsapp/coverage-reporter/releases/${asset_path}/coveralls-linux.tar.gz" ||
          ! curl -sLO "https://github.com/coverallsapp/coverage-reporter/releases/${asset_path}/coveralls-checksums.txt"; then
          echo "Failed to download coveralls binary or checksum (Linux)."
          [ "${{ inputs.fail-on-error }}" == "false" ] && exit 0
          exit 1
        fi

        # Try to verify the downloaded binary
        if ! grep coveralls-linux.tar.gz coveralls-checksums.txt | sha256sum -c; then
          echo "Checksum verification failed (Linux)."
          [ "${{ inputs.fail-on-error }}" == "false" ] && exit 0
          exit 1
        fi

        tar -xzf coveralls-linux.tar.gz

        # Check if the binary exists
        if [ ! -f ~/bin/coveralls ]; then
          echo "Coveralls binary not found after extraction (Linux)."
          exit 1
        fi

        # Cleanup
        rm coveralls-checksums.txt
        echo ~/bin >> $GITHUB_PATH

    - name: Install coveralls reporter (Windows)
      if: startsWith(runner.os, 'Windows')
      env:
        COVERAGE_REPORTER_VERSION: ${{ inputs.coverage-reporter-version }}
      shell: pwsh
      run: |
        # Enable debugging if 'debug' is true
        if ("${{ inputs.debug }}" -eq "true") {
          Set-PSDebug -Trace 1
        }
        
        # Try to download the binary and checksum file
        New-Item -Path $env:HOME\bin -ItemType directory -Force
        Push-Location $env:HOME\bin
        if($env:COVERAGE_REPORTER_VERSION -eq "latest") {
          Invoke-WebRequest -Uri "https://github.com/coverallsapp/coverage-reporter/releases/latest/download/coveralls-windows.exe" -OutFile "coveralls.exe"
          Invoke-WebRequest -Uri "https://github.com/coverallsapp/coverage-reporter/releases/latest/download/coveralls-checksums.txt" -OutFile "sha256sums.txt"
        } else {
          Invoke-WebRequest -Uri "https://github.com/coverallsapp/coverage-reporter/releases/download/$env:COVERAGE_REPORTER_VERSION/coveralls-windows.exe" -OutFile "coveralls.exe"
          Invoke-WebRequest -Uri "https://github.com/coverallsapp/coverage-reporter/releases/download/$env:COVERAGE_REPORTER_VERSION/coveralls-checksums.txt" -OutFile "sha256sums.txt"
        }
        
        # Try to verify the downloaded binary
        if ((Get-FileHash coveralls.exe).Hash -ne (Get-Content sha256sums.txt | Select-String 'windows.exe' | ForEach-Object { ($_ -split "\s+")[0] })) {
          Write-Host "Checksum verification failed (Windows)."
          exit 1
        }

        # Check if the binary exists
        if (!(Test-Path -Path "$env:HOME\bin\coveralls.exe")) {
          Write-Host "Coveralls binary not found after download and verification (Windows)."
          exit 1
        }

        # Cleanup
        Remove-Item sha256sums.txt -Force
        echo $env:HOME\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Done report
      if: inputs.parallel-finished == 'true'
      shell: ${{ startsWith(runner.os, 'Windows') && 'pwsh' || 'bash' }}
      run: >-
        coveralls done
        ${{ inputs.debug == 'true' && '--debug' || '' }}
        ${{ inputs.measure == 'true' && '--measure' || '' }}
        ${{ inputs.build-number && format('--build-number {0}', inputs.build-number) || '' }}
        ${{ inputs.fail-on-error == 'false' && '--no-fail' || '' }}
      env:
        COVERALLS_DEBUG: ${{ inputs.debug }}
        COVERALLS_CARRYFORWARD_FLAGS: ${{ inputs.carryforward }}
        COVERALLS_FLAG_NAME: ${{ inputs.flag-name }}
        COVERALLS_PARALLEL: ${{ inputs.parallel }}
        COVERALLS_ENDPOINT: ${{ inputs.coveralls-endpoint }}
        COVERALLS_GIT_BRANCH: ${{ inputs.git-branch }}
        COVERALLS_GIT_COMMIT: ${{ inputs.git-commit }}
        COVERALLS_REPO_TOKEN: ${{ inputs.github-token }}

    - name: Coverage report
      if: inputs.parallel-finished != 'true'
      shell: ${{ startsWith(runner.os, 'Windows') && 'pwsh' || 'bash' }}
      run: >-
        coveralls report
        ${{ inputs.debug == 'true' && '--debug' || '' }}
        ${{ inputs.measure == 'true' && '--measure' || '' }}
        ${{ inputs.fail-on-error == 'false' && '--no-fail' || '' }}
        ${{ inputs.allow-empty == 'true' && '--allow-empty' || '' }}
        ${{ inputs.base-path && format('--base-path {0}', inputs.base-path) || '' }}
        ${{ inputs.build-number && format('--build-number {0}', inputs.build-number) || '' }}
        ${{ inputs.format && format('--format {0}', inputs.format) || '' }}
        ${{ inputs.file || inputs.path-to-lcov }}
        ${{ inputs.files }}
      env:
        COVERALLS_DEBUG: ${{ inputs.debug }}
        COVERALLS_CARRYFORWARD_FLAGS: ${{ inputs.carryforward }}
        COVERALLS_FLAG_NAME: ${{ inputs.flag-name }}
        COVERALLS_PARALLEL: ${{ inputs.parallel }}
        COVERALLS_ENDPOINT: ${{ inputs.coveralls-endpoint }}
        COVERALLS_GIT_BRANCH: ${{ inputs.git-branch }}
        COVERALLS_GIT_COMMIT: ${{ inputs.git-commit }}
        COVERALLS_REPO_TOKEN: ${{ inputs.github-token }}
        COVERALLS_COMPARE_REF: ${{ inputs.compare-ref }}
        COVERALLS_COMPARE_SHA: ${{ inputs.compare-sha }}
        COVERALLS_SOURCE_HEADER: github-action
